#ifndef BOTTOMHEATINGSOLVER_H
#define BOTTOMHEATINGSOLVER_H

#include <QtCore/QMutex>
#include <QtCore/QThread>
#include "BottomHeating_global.h"

//! Класс, отвечающий за решение конвективной задачи бокового подогрева.
class BOTTOMHEATINGSHARED_EXPORT BottomHeatingSolver  : public QThread
{
    Q_OBJECT

public:
    //! \param[in] parent Указатель на родительский виджет.
    BottomHeatingSolver(QObject *parent = NULL);

    ~BottomHeatingSolver();

    /*!
     *  \brief Функция для задания физических параметров задачи.
     *  \param height           Высота расчетной области.
     *  \param Pr               Число Прандтля.
     *  \param Gr               Число Грасгофа.
     *  \param isLeftWallHard   Флаг, показывающий является ли левая стенка жесткой.
     *  \param isRightWallHard  Флаг, показывающий является ли правая стенка жесткой.
     *  \param isTopWallHard    Флаг, показывающий является ли верхняя стенка жесткой.
     *  \param isBottomWallHard Флаг, показывающий является ли нижняя стенка жесткой.
     */
    void setProblemParameters(double height, double Pr, double Gr, bool isLeftWallHard,
                              bool isRightWallHard, bool isTopWallHard, bool isBottomWallHard);

    /*!
     *  \brief Функция для задания математических параметров задачи.
     *  \param nx           Число узлов сетки по горизонтали.
     *  \param ny           Число узлов сетки по вертикали.
     *  \param numOfMaxIter Максимальное число итераций.
     *  \param wT           Коэффициент релаксации для температуры.
     *  \param wPsi         Коэффициент релаксации для функции тока.
     *  \param wOmega       Коэффициент релаксации для вихря.
     */
    void setSolverParameters(int nx, int ny, int maxNumOfIter, double wT, double wPsi, double wOmega);

    //! \return Значение по умолчанию для параметра релаксации температуры.
    double getDefaultWT();

    //! \return Значение по умолчанию для параметра релаксации функции тока.
    double getDefaultWPsi();

    //! \return Значение по умолчанию для параметра релаксации вихря.
    double getDefaultWOmega();

    //! \return Значение по умолчанию для максимального числа итераций.
    int getDefaultMaxNumOfIter();

    //! Прервать работу решателя.
    void cutOffSolution();

protected:
    //! Запуск решателя в отдельном потоке.
    void run();

signals:
    /*!
     *  Сигнал о завершении очередной итерации решателя.
     *  \param currentIteration     Номер завершенной итерации.
     *  \param maxNumOfIterations   Максимально допустимое число итераций.
     *  \param currentResidual      Текущая невязка по нелинейности.
     */
    void iterationFinished(int currentIteration, int maxNumOfIterations ,double currentResidual);

    /*!
     *  Сигнал о том, что решение прервано из-за того, что достигнуто максимальное число итераций.
     *  \param currentResidual      Текущая невязка по нелинейности.
     */
    void maxIterNumberAttained(double currentResidual);

    //! Сигнал о завершении работы решателя.
    void solutionFinished();

private:
    /*!
     *  Функция выделяет динамическую память для данных, создает конечноразностную сетку,
     *  а также задает начальное приближение для искомых функций T, Psi и Omega.
     */
    void prepareData();

    //! Расчет невязки по нелинейности с учетом коэффициента релаксации.
    //Специфика метода конечных разностей позволяет обойтись без выделения дополнительной памяти
    //под хранение значений искомых функций с прошлой итерации по нелинейности. Однако, в этом
    //случае после завершения очередной итерации невозможно найти разницу между старым и новым
    //значениями функции т.к. старые значения уже "затерты" (а значение указанной разницы необходимо
    //для вычисления критерия останова). Поэтому разница между старым и новым значениями функций
    //вычисляется в процессе итерации и передается в эту функцию уже в качестве параметров.
    /*!
     *  \param  normEpsT        Норма разности между новым и старым значениями температуры.
     *  \param  normEpsPsi      Норма разности между новым и старым значениями функции тока.
     *  \param  normEpsOmega    Норма разности между новым и старым значениями вихря.
     */
    double residual(double normEpsT, double normEpsPsi, double normEpsOmega);

    //! Вычисление вектора скорости.
    void formV();

    //! Вывод результатов.
    void output();

    //! Освобождение динамически выделенной памяти.
    void freeMemory();



    //********************************************************************************************************
    //Физические и геометрические параметры задачи.
    //********************************************************************************************************
    double Pr;      //!< Число Прандтля.
    double Gr;      //!< Число Грасгофа.
    double width;   //!< Ширина расчетной области.
    double height;  //!< Высота расчетной области.

    //********************************************************************************************************
    //Конечноразностная сетка.
    //********************************************************************************************************
    int nx;         //!< Число узлов в сетке по горизонтали.
    int ny;         //!< Число узлов в сетке по вертикали.
    double hx;      //!< Шаг сетки по горизонтали.
    double hy;      //!< Шаг сетки по вертикали.
    double *x;      //!< x-координаты узлов сетки.
    double *y;      //!< y-координаты узлов сетки.

    //********************************************************************************************************
    //Матрицы неизвестных.
    //********************************************************************************************************
    double **t;
    double **psi;
    double **omega;

    //********************************************************************************************************
    //Матрицы компонент скорости.
    //********************************************************************************************************
    double **vx;
    double **vy;

    //********************************************************************************************************
    //Математические параметры задачи.
    //********************************************************************************************************
    double wT;          //!< Коэффициент релаксации для температуры.
    double wPsi;        //!< Коэффициент релаксации для функции тока.
    double wOmega;      //!< Коэффициент релаксации для вихря.
    int maxNumOfIter;   //!< Максимальное число итераций решателя.

    //********************************************************************************************************
    //Переменные, описывающие краевые условия задачи.
    //********************************************************************************************************
    bool isLeftWallHard;    //!< Флаг, показывающий является ли левая стенка жесткой.
    bool isRightWallHard;   //!< Флаг, показывающий является ли правая стенка жесткой.
    bool isTopWallHard;     //!< Флаг, показывающий является ли верхняя стенка жесткой.
    bool isBottomWallHard;  //!< Флаг, показывающий является ли нижняя стенка жесткой.

    //********************************************************************************************************
    //********************************************************************************************************
    QMutex mutex;   //!< Mutex обеспечивает защиту переменной от одновременного доступа из нескольких потоков.

    bool isSolutionCutOff;   //!< Флаг, реагирующий на сигналы извне о прерывании работы решателя.
};

#endif // BOTTOMHEATINGSOLVER_H
