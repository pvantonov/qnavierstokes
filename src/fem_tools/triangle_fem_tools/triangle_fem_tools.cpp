#include <QtCore/QList>
#include <QtCore/QVector>
#include "triangle_fem_tools.hpp"

void trianglefemtools::formMatrixProfile(int numOfTriangles, int numOfPoints, int **nvtr, int **ig, int **jg)
{
    QVector< QList<int> > table(numOfPoints);

    //********************************************************************************************************
    //заносим в таблицу информацию о том какие узлы связаны с какими поскольку матрица имеет симметричный
    //профиль, то достаточно собрать информацию нужную для построения нижнего треугольника. Т.е. учитываем
    //связь двух узлов если глобальный номер первого узла(a) больше номера второго узла(b). В строке №a
    //хранится информация о всех узлах с которыми связан узел a.
    //********************************************************************************************************
    for(int i = 0; i < numOfTriangles; i++)
        for(int j = 0; j < 3; j++)
            for(int k = 0; k < 3; k++)
                if(nvtr[i][j] > nvtr[i][k])
                    if(!table[nvtr[i][j]].contains(nvtr[i][k]))
                        table[nvtr[i][j]].append(nvtr[i][k]);

    //*******************************************************************************************************
    //выделяем память под массив ig
    //*******************************************************************************************************
    *ig = new int[numOfPoints + 1];

    //*******************************************************************************************************
    //подсчитываем количество элементов в портрете матрицы
    //*******************************************************************************************************
    int numOfNonzeroElements(0);
    for(int i = 0; i < numOfPoints; i++)
        numOfNonzeroElements += table[i].size();

    //*******************************************************************************************************
    //выделяем память под массив jg
    //*******************************************************************************************************
    *jg = new int[numOfNonzeroElements];

    //*******************************************************************************************************
    //формируем ig и jg
    //*******************************************************************************************************
    (*ig)[0] = 0;
    (*ig)[1] = 0;

    for(int i = 1, j = 0; i < numOfPoints; i++)
    {
        for(int k = 0; k < table[i].size(); k++)
        {
            //заполняем jg
            (*jg)[j] = table[i][k];
            j++;
        }
        //заполняем ig
        (*ig)[i + 1] = (*ig)[i] + table[i].size();
    }
}
